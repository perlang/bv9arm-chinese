.. 
   Copyright (C) Internet Systems Consortium, Inc. ("ISC")
   
   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, you can obtain one at https://mozilla.org/MPL/2.0/.
   
   See the COPYRIGHT file distributed with this work for additional
   information regarding copyright ownership.

.. _Introduction:

介绍
============

互联网域名系统（DNS）由以下几个部份组成：
在互联网中以层次体系方式指定实体名字的语法，用于在名字之间
授权的规则，和实际完成从名字到互联网地址映射的系统实现。
DNS 数据是维护在一组分布式层次数据库中。

.. _doc_scope:

文档范围
-----------------

伯克利互联网名字域（Berkeley Internet Name Domain，BIND）
在一些操作系统上实现了一个名字服务器。
本文档为系统管理员提供了安装和维护互联网系统联盟
（Internet Systems Consortium，ISC）
的BIND版本9软件包的基本信息。

本手册涵盖了BIND版本 |release| 。

.. _organization:

本文档的组织
-----------------------------

在本文档中， **第一章** 介绍 DNS 和 BIND 的基本概念。 **第二章**
描述了在不同环境中运行 BIND 对资源的要求。
**第三章** 中的信息以 **面向任务**
的方式表述并按功能组织，目标是为 BIND 9软件的安装过程
提供帮助。面向任务部份之后是 **第四章** ，它是按照参考手册组织的，
以帮助正在进行的软件维护。 **第五章** 包含更多的系统管理员实现
某种选项可能会用到的高级概念。
**第六章** 指明安全考虑，
**第七章** 包含排错帮助。文档主体后面是几个
**附录** ，其中包含了一些有用的参考信息，例如一个
**参考书目** 以及与 *BIND* 和域名系统
相关的历史信息。

.. _conventions:

本文档中的惯例
---------------------------------

在本文档中，我们通常使用 ``Fixed width`` [#]_ 文本来指示下列信息类型：

- 路径名
- 文件名
- 网页地址
- 主机名
- 邮件列表名
- 新术语或新概念
- 字面上的用户输入
- 程序输出
- 关键字
- 变量

"quotes," **bold**, 或 *italics* 格式也用于强调或澄清。

.. _dns_overview:

域名系统（DNS）
----------------------------

本文档解释了BIND（Berkeley Internet Name Domain ）软件包的安装和维护，
我们通过回顾域名系统（Domain Name System，DNS）基础及其与BIND的关系来
作为开始。

.. _dns_fundamentals:

DNS基础
~~~~~~~~~~~~~~~~

域名系统（DNS）是一个层次化的分布式数据库。它存储用于互联网主机名与
IP 地址相互映射的信息，邮件路由信息，及其它互联网应用所用到的数据。

客户端通过调用一个 **解析器** 库来在 DNS 中查找信息，
解析器向一个或多个 **名字服务器** 发出请求并解释响应。
BIND 9软件分发包中包括一个名字服务器，
``named`` ，和一个相关工具的集合。

.. _domain_names:

域和域名
~~~~~~~~~~~~~~~~~~~~~~~~

存储在 DNS 中的数据以 **域名** 来标识，并根据类别或
行政区被组织成一颗树。树中的每个节点由一个标记表示，被称为一个
**域** 。节点的域名就是将从这个节点到 **根** 节点
的路径所经过的所有标记串接而成。它被表示成的书面格式
是从右至左以点分隔的标记串。 一个标记在其父域之内是唯一的。

例如，一个名叫 *Example, Inc.* 的公司中的一台主机的域名
可以是 ``ourhost.example.com`` ，这里 ``com``
是 ``ourhost.example.com`` 所属域的顶级域，
``example`` 是 ``com`` 下的一个子域，
而 ``ourhost`` 是主机名。

为管理考虑，名字空间划分为名为 **区** 的单位，每个区从一个节点开始，
向下扩展到“叶子”节点或其它区开始的节点。每个区的数据
存储在一个 **名字服务器** 中，名字服务器使用
**DNS协议** 回答对区的查询。

每个域名相关的数据以 **资源记录** （resource records，
RR）的形式存储。一些所支持的资源记录类型在
:ref:`types_of_resource_records_and_when_to_use_them`
中描述。

更多关于DNS设计和DNS协议的详细的信息，请参见 :ref:`rfcs` 中
所列的标准文档。

区
~~~~~

正确运行一个名字服务器，理解一个 **区** 和一个
**域** 之间的差别是很重要的。

正如前面所说，区是DNS树的一个授权点。一个区是由
域树中那些邻接部份组成，名字服务器具有这部份域树的全部信息，并是
这部份域树的权威。它包含域树中自某个节点之下的所有域名，除那些被授权
到其它区的之外。一个授权点在父区中以一个或多个 **NS记录** 标记，
它应该与位于被授权区顶点的等效 NS 记录相匹配。

例如，考虑 ``example.com`` 域，它可以包含这样的名字：
``host.aaa.example.com`` 和 ``host.bbb.example.com`` ，即使
``example.com`` 区只包括 ``aaa.example.com`` 和 ``bbb.example.com``
区的授权。区可以精确对应到一个单一的域，也可以对应到域的一部份，而其
它部份则可以授权到其它名字服务器。DNS树中的每个名字都是一个 **域** ，
即使它是 **终端节点** ，只不过这样就没有 **子域** 。每个子域都是一个
域，而除了根之外的所有域同时都是一个子域。术语不太形象，我们建议阅读
:rfc:`1033` ， :rfc:`1034` 和 :rfc:`1035` 以获得对这个艰难而微妙问题
的完整理解。

虽然BIND被称为一个“域名服务器”，但它主要处理的是区。在 ``named.conf``
文件中声明的 ``primary`` 和 ``secondary`` 都是指的区，而不是域。当
BIND询问一些别的站点是否愿意充当一个 **域** 的辅服务器时，它实际上是
想要对方为一些 **区** 来担当辅服务器的服务。

.. _auth_servers:

权威名字服务器
~~~~~~~~~~~~~~~~~~~~~~~~~~

每个区至少由一台 **权威名字服务器** 来服务。后者包含了
这个区的全部数据。为了使DNS能在服务器和网络故障时照常工作，大多数区都
有两个或更多的权威服务器，并且分布在不同的网络中。

权威服务器的应答数据包中包括“权威回答”（authoritative answer, AA）位。
这在使用像 ``dig`` （ :ref:`diagnostic_tools` ）
这样的工具来调试DNS配置时容易鉴别。

.. _primary_master:

主服务器
^^^^^^^^^^^^^

维护有原始区数据的权威服务器被称为 **主服务器** ，
或简称 **主** 。典型情况下，它从某个本地文件装载
区数据，这个本地文件是由手工编辑，或者由某个手工编辑的其它本地文件
所生成。这个文件叫做 **区文件** 或 **主文件** 。

然而，在某些情况下，主文件可能完全不是手工编辑而成，而是
**动态更新** 操作的结果。

.. _secondary_server:

辅服务器
^^^^^^^^^^^^^

另一种权威服务器， **辅** 服务器（secondary，以前被称为
**slave** ）通过一个名叫 **区传送** （zone transfer）
的复制过程从另一台服务器中取得区的内容。典型情况下，数据直接从
主传送，但是也可能从另一台辅传送。换句话说，一个辅服务器
本身也可以充当一个次级辅服务器的主。

辅服务器必须定期发出一个刷新请求来决定区内容是否需要更新。
这是通过请求这个区的授权开始 [#]_ (SOA)记录并检查SERIAL字段是否被更新
了来完成的；如果已更新，就发起一个新的区传送请求。这些刷新请求的时间
是由SOA的REFRESH和RETRY字段控制的，但是可以被
``max-refresh-time`` ，
``min-refresh-time`` ，
``max-retry-time`` 和
``min-retry-time`` 选项覆盖。

如果区数据不能在SOA的EXPIRE选项（最大到硬编码的24周）所指定的
时间内更新，辅区将会过期并且不再响应请求。

.. [#]
   译注： Start of Authority

.. _stealth_server:

隐藏服务器
^^^^^^^^^^^^^^^

通常，区的所有权威服务器都在上级区的 NS 记录中列出。这些 NS 记录组成了
上级对这个区的 **授权** 。权威服务器也在自身的
区文件中列出，位置在区的 **顶级** （top level）或
**顶点** （apex）。未在父区中NS授权的服务器可以在区的顶级用NS记录中列出，
但未出现在区的顶级的服务器不能在父区中列出。

一个 **隐藏服务器** 就是指是一个区的权威服务器但却
没有出现在区的NS 记录中。隐藏服务器可以用来保存一个区的本地拷贝，以
加速对区记录的访问，或者在区的所有“官方”服务器都无法访问时
使区仍然可用。

一个主服务器本身是作为一个隐藏服务器配置时，通常被称为一个
“隐藏主服务器”配置。这种配置的一个用途是主服务器在一个防火墙的
后面而不直接与外面的世界通信。

.. _cache_servers:

缓存名字服务器
~~~~~~~~~~~~~~~~~~~~

由大多数操作系统所提供的解析器库叫做 **存根解析器** ，
意思是它们没有通过直接与权威服务器通信而执行完整域名解析过程的
能力。作为代替，它们依赖一个本地名字服务器来为它们执行解析。这个本地
服务器称为 **递归的** 名字服务器；它为本地客户端执行
**递归查找** 。

为增强性能，递归服务器缓存它们所执行查找的结果。由于递归过程和缓存是
密切相联的，术语 **递归服务器** 和 **缓存服务器**
通常是作为同义词使用的。

在一个缓存名字服务器的缓存中，一个记录被保留的时间长短是由与每个资源
记录相关的生存期（Time-To-Live, TTL）字段所控制的。

.. _forwarder:

转发
^^^^^^^^^^

即使一个缓存名字服务器也可以不需要由其本身来执行递归查找。作为代替，
它可以将其自身缓存中没有的一些或全部请求 **转发** 到另一个缓存服务器，
后者通常被称为一个 **转发服务器** 。

使用转发服务器的典型情况是，当一个管理员不希望一个站点的所有服务器都
与互联网上的其它服务器直接打交道时。例如，一个通常景象是当多个内部
DNS服务器在一台互联网防火墙之后。防火墙之后的服务器将它们的请求转发
到能够访问外部的服务器，后者代表内部服务器查询互联网上的DNS服务器。

另外一个场景（现在主要被响应策略区域取代）是先将查询发送到一台定制服
务器进行RBL处理，然后再将它们转发到更广泛的互联网。

在给定的设置中可以有一个或多个转发服务器。在 ``named.conf`` 中所列出
的转发者的顺序并不决定其被查询的顺序；相反， ``named`` 使用先前请求
的响应时间来选择响应最快的服务器。对于尚未被查询的服务器，将给出一个
初始的小随机响应时间，以确保其至少被尝试一次。根据所记录的响应时间进
行的动态调整确保所有的转发者都被请求，即使其具有更慢的响应时间。这允
许基于服务器的响应特性而改变行为（译注：分配的请求）。

.. _multi_role:

名字服务器的多个角色
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

BIND名字服务器可以同时作为一些区的主服务器，
另一些区的辅服务器以及为一些本地客户端充当缓存（递归）服务器。

然而，由于权威名字服务和缓存/递归名字服务的功能在逻辑上是分离的，通常
将它们分别运行在分离的服务器上更有利些。一个只提供权威名字服务的服务
器（一个 **只权威** 服务器）可以关掉递归功能运行，这样
增强了可靠性和安全性。一个不为任何区作权威服务器并且只为本地客户端提
供递归服务的服务器（一个 **只缓存** 服务器）不需要全面
开放给互联网，可以被放在一个防火墙内部。

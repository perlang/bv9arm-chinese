<!DOCTYPE book [
<!ENTITY mdash "&#8212;">]>
<!--
 - Copyright (C) 2010, 2012-2016  Internet Systems Consortium, Inc. ("ISC")
 -
 - This Source Code Form is subject to the terms of the Mozilla Public
 - License, v. 2.0. If a copy of the MPL was not distributed with this
 - file, You can obtain one at http://mozilla.org/MPL/2.0/.
-->

<!-- Converted by db4-upgrade version 1.0 -->
<section xmlns:db="http://docbook.org/ns/docbook" version="5.0" xml:id="pkcs11"><info><title>PKCS#11 (Cryptoki)支持</title></info>

  <para>
   PKCS#11 (公钥加密标准 #11)为控制硬件安全模块（HSM）和其它
   密码支持设备定义了一个平台独立的API。
  </para>
  <para>
    BIND 9可以支持三种HSM：AEP Keyper，在Debian Linux，Solaris x86
    和Windows Server 2003上测试通过；Thales nShield，在Debian Linux
    上测试通过；以及Sun SCA 6000密码加速板，在Solaris x86上测试通过。
    另外，BIND可以与所有当前版本的SoftHSM，一种基于软件的
    由OpenDNSSEC项目产出的HSM模拟器，一块工作。
  </para>
  <para>
    PKCS#11利用了一个“提供者库（provider library）”：一个动态加载库，
    它提供一个低级PKCS#11接口来驱动HSM硬件。PKCS#11提供者库来自HSM厂商，
    它针对于由其控制的特定HSM有效。
  </para>
  <para>
    BIND 9中存在两种可用的对PKCS#11支持的机制：基于OpenSSL的PKCS#11和
    原生PKCS#11。在使用第一种机制时，BIND使用一个OpenSSL的修改版本，
    后者加载提供者库并间接操作HSM；任何HSM不支持的加密操作都替代成
    由OpenSSL执行。
    第二种机制让BIND完全绕过OpenSSL；BIND自己加载提供者库，并使用
    PKCS#11 API直接驱动HSM。
  </para>
  <section><info><title>先决条件</title></info>

    <para>
      关于HSM的安装，初始化，测试和故障解决方面的信息，参见由HSM厂商
      提供的文档。
    </para>
  </section>
  <section><info><title>原生PKCS#11</title></info>

    <para>
      原生PKCS#11模式仅能与一个能够执行<emphasis>每个</emphasis>
      BIND 9可能需要的加密操作的HSM一块工作。
      HSM的提供者库必须带有一个PKCS#11 API的完全实现，因此所有
      这些函数都是可以访问的。
      在写作本文档时，仅有Thales nShield HSM和SoftHSMv2可以被用于这个功能。
      对其它HSM，包括AEP Keyper，Sun SCA 6000和旧版本的SoftHSM，使用
      基于OpenSSL的PKCS#11。
      （注意：最终，当更多HSM支持原生PKCS#11，可以预料基于OpenSSL
      的PKCS#11将被废弃。）
    </para>
    <para>
      要使用原生PKCS#11构建BIND，按如下配置：
    </para>
    <screen>
$ <userinput>cd bind9</userinput>
$ <userinput>./configure --enable-native-pkcs11 \
    --with-pkcs11=<replaceable>provider-library-path</replaceable></userinput>
    </screen>
    <para>
      这将导致所有BIND工具，包括<command>named</command>和
      <command>dnssec-*</command>及<command>pkcs11-*</command>工具，使用
      在<replaceable>provider-library-path</replaceable>中指定的PKCS#11
      提供者库来加密。
      （提供者库的路径可以在<command>named</command>和
      <command>dnssec-*</command>工具中使用<option>-E</option>，或者在
      <command>pkcs11-*</command>工具中使用<option>-m</option>来覆盖。）
    </para>
    <section><info><title>构建SoftHSMv2</title></info>
      <para>
        SoftHSMv2，最新开发版SoftHSM，可在
        <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/opendnssec/SoftHSMv2">
	  https://github.com/opendnssec/SoftHSMv2
	</link>得到。
        它是由OpenDNSSEC项目所开发的软件库
	（<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.opendnssec.org">
	  http://www.opendnssec.org
	</link>），
	它提供了一个虚拟HSM的PKCS#11接口，以一个在本地文件系统上的
	SQLite3数据库的形式实现。
	它提供的安全性较一个真正的HSM较少，但是它允许你在没有可用的
	HSM时试验原生的PKCS#11。
	SoftHSMv2可以被配置成使用OpenSSL或者Botan库来执行加密功能，
	但当其用于在BIND中的原生PKCS#11时，必须使用OpenSSL。
      </para>
      <para>
        缺省时，SoftHSMv2配置文件是
	<replaceable>prefix</replaceable>/etc/softhsm2.conf（这里的
	<replaceable>prefix</replaceable>是在编译时配置的）。
	这个位置可以被SOFTHSM2_CONF环境变量覆盖。SoftHSMv2加密存储
	必须在与BIND一起使用之前被安装和初始化。
      </para>
      <screen>
$ <userinput> cd SoftHSMv2 </userinput>
$ <userinput> configure --with-crypto-backend=openssl --prefix=/opt/pkcs11/usr --enable-gost </userinput>
$ <userinput> make </userinput>
$ <userinput> make install </userinput>
$ <userinput> /opt/pkcs11/usr/bin/softhsm-util --init-token 0 --slot 0 --label softhsmv2 </userinput>
      </screen>
    </section>
  </section>
  <section><info><title>基于OpenSSL的PKCS#11</title></info>
    <para>
      基于OpenSSL的PKCS#11模式使用了一个OpenSSL库的修改版本；当前官方
      版本的OpenSSL不能完全支持PKCS#11。
      ISC提供了一个补丁来纠正这个情况。这个补丁是基于源于OpenSolaris项目
      所完成的工作；它被ISC修改以提供诸如PIN管理和密钥引用
      （译注：key-by-reference）等新特性。
    </para>
    <para>
      打过补丁的OpenSSL提供了两种PKCS#11新“特点”，其中一种
      必须在配置时选择。正确的选择依赖于HSM硬件：
    </para>
    <itemizedlist>
      <listitem>
        <para>
          'crypto-accelerator'用于具有硬件加密加速的HSM，如
           SCA 6000板。这使得OpenSSL在HSM中运行所有支持的加密操作。
        </para>
      </listitem>
      <listitem>
        <para>
          'sign-only'用于那些设计功能主要是作为密钥存储设备，而缺乏
          硬件加速的HSM。这类设备是高安全的，但是不需要在加密时比系统
          CPU更快 &mdash; 通常，他们会更慢。因此，最高效的方法是仅将其
          用于要求访问安全私钥的加密功能，而其它所有计算密集性操作都使用
          系统CPU。AEP Keyper是这类设备的一个例子。
        </para>
      </listitem>
    </itemizedlist>
    <para>
      修改的OpenSSL代码包含在BIND 9发行版中，以针对最新OpenSSL版本的
      带上下文的diff结果的形式。OpenSSL 0.9.8，1.0.0，1.0.1和1.0.2都
      被支持；分别有各自版本的diff文件。在后面的例子中，我们使用了
      OpenSSL 0.9.8，但是同样的方法也适用于OpenSSL 1.0.0到1.0.2。
    </para>
    <note><simpara>
      这篇文档（2016年1月）的最新OpenSSL版本是0.9.8zh，1.0.0t，1.0.1q和1.0.2f。
      ISC在新版本的OpenSSL发布时会提供升级的补丁。在以下例子中的版本号预期
      也会改变。
    </simpara></note>
    <para>
      在构建带PKCS#11支持的BIND 9之前，需要在适当的位置使用这个补丁构建
      OpenSSL并使用你的HSM的PKCS#11提供者库的路径来配置它。
    </para>
    <section><info><title>给OpenSSL打补丁</title></info>

      <screen>
$ <userinput>wget <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="">http://www.openssl.org/source/openssl-0.9.8zc.tar.gz</link></userinput>
</screen>
      <para>解压tar包：</para>
      <screen>
$ <userinput>tar zxf openssl-0.9.8zc.tar.gz</userinput>
</screen>
      <para>应用BIND 9发行版所带的补丁：</para>
      <screen>
$ <userinput>patch -p1 -d openssl-0.9.8zc \
            &lt; bind9/bin/pkcs11/openssl-0.9.8zc-patch</userinput>
</screen>
    <note><simpara>
      补丁文件可能与不同操作系统下的"patch"应用不兼容。
      你可能需要安装GNU patch。
    </simpara></note>
    <para>
      在构建OpenSSL时，将其放在一个非标准的位置，这样它不会干扰系统上的
      OpenSSL库。在下面的例子中，我们选择安装到"/opt/pkcs11/usr"。我们将在
      配置BIND 9时使用这个位置。
    </para>
    <para>
      之后，在构建BIND 9时，用户构建OpenSSL库的位置需要通过configure指定。
    </para>
    </section>
    <section><info><title>在Linux上为AEP Keyper构建OpenSSL</title></info>
      <!-- Example 1 -->

      <para>
        AEP Keyper是一个高安全密钥存储设备，但是不提供硬件加密加速。
        它能够执行加密操作，但是可能会减慢你的系统CPU。因此，我们在构建
        OpenSSL时选择'sign-only'选项。
      </para>
      <para>
        Keyper专用的PKCS#11提供者库是随同Keyper软件分发的。在这个例子中，
        我们将其放在/opt/pkcs11/usr/lib下：
      </para>
      <screen>
$ <userinput>cp pkcs11.GCC4.0.2.so.4.05 /opt/pkcs11/usr/lib/libpkcs11.so</userinput>
</screen>
      <para>
        Keyper库要求线程，所以我们必须指定-pthread。
      </para>
      <screen>
$ <userinput>cd openssl-0.9.8zc</userinput>
$ <userinput>./Configure linux-x86_64 -pthread \
            --pk11-libname=/opt/pkcs11/usr/lib/libpkcs11.so \
            --pk11-flavor=sign-only \
            --prefix=/opt/pkcs11/usr</userinput>
</screen>
      <para>
        在配置之后，运行"<command>make</command>"和
        "<command>make test</command>"。如果"<command>make test</command>"
        失败并输出"pthread_atfork() not found"，你可能忘记加上前面提到的
        -pthread了。
      </para>
    </section>
    <section><info><title>为Solaris上的SCA 6000构建OpenSSL</title></info>
      <!-- Example 2 -->

      <para>
        SCA-6000 PKCS#11提供者是作为一个系统库libpkcs11安装的。
        它是一个真正的加密加速器，能够比任何CPU快4倍以上，所以特性应该
        是'crypto-accelerator'。
      </para>
      <para>在这个例子中，我们正在AMD64系统上的Solaris x86平台上构建。</para>
      <screen>
$ <userinput>cd openssl-0.9.8zc</userinput>
$ <userinput>./Configure solaris64-x86_64-cc \
            --pk11-libname=/usr/lib/64/libpkcs11.so \
            --pk11-flavor=crypto-accelerator \
            --prefix=/opt/pkcs11/usr</userinput>
</screen>
      <para>
        （对一个32位构建，使用"solaris-x86-cc"和/usr/lib/libpkcs11.so。）
      </para>
      <para>
        在配置之后，运行<command>make</command>和
        <command>make test</command>。
      </para>
    </section>
    <section><info><title>为SoftHSM构建OpenSSL</title></info>
      <!-- Example 3 -->

      <para>
        SoftHSM（版本1）是一个由OpenDNSSEC项目
        (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.opendnssec.org">
          http://www.opendnssec.org
        </link>)
	所提供的软件库，它提供了一个虚拟HSM的PKCS#11接口，以一个
	在本地文件系统上的SQLite3数据库的形式实现。
        SoftHSM使用Botan库执行加密功能。
	虽然比一个真正的HSM更不安全，但是它允许你在没有可用的HSM时
	试验PKCS#11。
      </para>
      <para>
        在与OpenSSL一起使用SoftHSM之前，必须安装和初始化SoftHSM加密
	存储，并且SOFTHSM_CONF环境变量必须总是指向SoftHSM配置文件：
      </para>
      <screen>
$ <userinput> cd softhsm-1.3.7 </userinput>
$ <userinput> configure --prefix=/opt/pkcs11/usr </userinput>
$ <userinput> make </userinput>
$ <userinput> make install </userinput>
$ <userinput> export SOFTHSM_CONF=/opt/pkcs11/softhsm.conf </userinput>
$ <userinput> echo "0:/opt/pkcs11/softhsm.db" &gt; $SOFTHSM_CONF </userinput>
$ <userinput> /opt/pkcs11/usr/bin/softhsm --init-token 0 --slot 0 --label softhsm </userinput>
      </screen>
      <para>
        SoftHSM可以执行所有的加密操作，但是由于它只使用你系统的CPU，在除了签名
        之外的其它事务上使用都没有优势。因此，我们在构建OpenSSL时选择
        'sign-only'特性。
      </para>
      <screen>
$ <userinput>cd openssl-0.9.8zc</userinput>
$ <userinput>./Configure linux-x86_64 -pthread \
            --pk11-libname=/opt/pkcs11/usr/lib/libsofthsm.so \
            --pk11-flavor=sign-only \
            --prefix=/opt/pkcs11/usr</userinput>
</screen>
      <para>
        在配置之后，运行"<command>make</command>"和
        "<command>make test</command>"。
      </para>
    </section>
    <para>
      一旦你完成构建OpenSSL，运行
      "<command>apps/openssl engine pkcs11</command>"来确认PKCS#11支持
      是正确编译的。输出应该是下列行中的一种，具体取决于所选的特性：
    </para>
    <screen>
        (pkcs11) PKCS #11 engine support (sign only)
</screen>
    <para>或：</para>
    <screen>
        (pkcs11) PKCS #11 engine support (crypto accelerator)
</screen>
    <para>
      接下来，运行
      "<command>apps/openssl engine pkcs11 -t</command>"。这将试图
      初始化PKCS#11引擎。如果能够顺利完成，它将会报告
      <quote><literal>[ available ]</literal></quote>.
    </para>
    <para>
      如果输出正确，运行"<command>make install</command>"，将会
      把修改后的OpenSSL套件安装到<filename>/opt/pkcs11/usr</filename>。
    </para>
    <section><info><title>为Linux配置带AEP Keyper的BIND 9</title></info>
      <!-- Example 4 -->

      <para>
        为了链接到PKCS#11提供者，在构建BIND 9时必须打开对线程的支持。
      </para>
      <screen>
$ <userinput>cd ../bind9</userinput>
$ <userinput>./configure --enable-threads \
           --with-openssl=/opt/pkcs11/usr \
           --with-pkcs11=/opt/pkcs11/usr/lib/libpkcs11.so</userinput>
</screen>
    </section>
    <section><info><title>为Solaris配置带SCA 6000的BIND 9</title></info>
      <!-- Example 5 -->

      <para>
        为链接到PKCS#11提供者，必须在BIND 9构建时打开对线程的支持。
      </para>
      <screen>
$ <userinput>cd ../bind9</userinput>
$ <userinput>./configure CC="cc -xarch=amd64" --enable-threads \
            --with-openssl=/opt/pkcs11/usr \
            --with-pkcs11=/usr/lib/64/libpkcs11.so</userinput>
</screen>
      <para>（对一个32位的构建，省略CC="cc -xarch=amd64"。）</para>
      <para>
        如果configure报告OpenSSL不工作，你可能有一个32/64位混合
        搭配的体系结构。或者，你可能没有为OpenSSL指定正确的路径（这个
        路径应该与OpenSSL配置时的--prefix参数一样）。
      </para>
    </section>
    <section><info><title>为SoftHSM配置BIND 9</title></info>
      <!-- Example 6 -->

      <screen>
$ <userinput>cd ../bind9</userinput>
$ <userinput>./configure --enable-threads \
           --with-openssl=/opt/pkcs11/usr \
           --with-pkcs11=/opt/pkcs11/usr/lib/libsofthsm.so</userinput>
</screen>
    </section>
    <para>
      在配置后，运行
      "<command>make</command>",
      "<command>make test</command>"和
      "<command>make install</command>"。
    </para>
    <para>
      （注意：如果“make test“在“pkcs11“系统测试中失败，你可能是忘记设置
      SOFTHSM_CONF环境变量了。）
    </para>
  </section>
  <section><info><title>PKCS#11工具</title></info>

    <para>
      BIND 9包含一个用以操作HSM的工具的最小集合，包括
      <command>pkcs11-keygen</command>，用于在HSM内生成一个新的密钥对，
      <command>pkcs11-list</command>，用于列出当前可用的对象，
      <command>pkcs11-destroy</command>，用于删除对象，和
      <command>pkcs11-tokens</command>，用于列出可用的符号。
    </para>
    <para>
      在UNIX/Linux构建中，这些工具仅在BIND 9使用--with-pkcs11选项
      配置时才被构建。（注意：如果--with-pkcs11被设置为“yes”，而不是
      PKCS#11提供者的路径，这时这些工具会被构建，但是提供者将会保持
      未定义的状态。使用-m选项或PKCS11_PROVIDER环境变量来指定提供者的路径。
    </para>
  </section>
  <section><info><title>使用HSM</title></info>

    <para>
      对基于OpenSSL的PKCS#11，我们必须设置运行时环境，以便装载OpenSSL和
      PKCS#11库：
    </para>
    <screen>
$ <userinput>export LD_LIBRARY_PATH=/opt/pkcs11/usr/lib:${LD_LIBRARY_PATH}</userinput>
</screen>
    <para>
      这导致<command>named</command>和其它的二进制可执行程序从
      <filename>/opt/pkcs11/usr/lib</filename>而不是缺省位置装载
      OpenSSL库。
      在使用原生PKCS#11时不需要本步骤。
    </para>
    <para>
      例如，在操作一个AEP Keyper时，也需要指定“machine”文件的位置，它
      存放提供者库所用到的Keyper的信息。如果机器文件在
      <filename>/opt/Keyper/PKCS11Provider/machine</filename>,
      使用：
    </para>
    <screen>
$ <userinput>export KEYPER_LIBRARY_PATH=/opt/Keyper/PKCS11Provider</userinput>
</screen>
    <para>
      无论何时运行使用HSM的任何工具，都必须设置这些环境变量，包含
      <command>pkcs11-keygen</command>, 
      <command>pkcs11-list</command>, 
      <command>pkcs11-destroy</command>, 
      <command>dnssec-keyfromlabel</command>, 
      <command>dnssec-signzone</command>, 
      <command>dnssec-keygen</command>和
      <command>named</command>。
    </para>
    <para>
      现在我们可以在HSM中创建和使用密钥。在这个例子中，我们将创建
      一个2048位的密钥并赋予其一个标记"sample-ksk"：
    </para>
    <screen>
$ <userinput>pkcs11-keygen -b 2048 -l sample-ksk</userinput>
</screen>
    <para>要确认密钥已经存在：</para>
    <screen>
$ <userinput>pkcs11-list</userinput>
Enter PIN:
object[0]: handle 2147483658 class 3 label[8] 'sample-ksk' id[0]
object[1]: handle 2147483657 class 2 label[8] 'sample-ksk' id[0]
</screen>
    <para>
      在使用这个密钥签名一个区之前，我们必须创建一对BIND 9密钥文件。
      "dnssec-keyfromlabel"应用程序完成这件事。在这个例子中，我们将使用
      HSM密钥"sample-ksk"作为"example.net"的密钥签名密钥：
    </para>
    <screen>
$ <userinput>dnssec-keyfromlabel -l sample-ksk -f KSK example.net</userinput>
</screen>
    <para>
      作为结果的K*.key和K*.private文件现在可以用于签名区。与包含公钥
      和私钥的普通K*文件不同，这些文件只包含公钥数据，和一个存储在HSM中的
      私钥的标识符。使用私钥进行签名是在HSM内部完成的。
    </para>
    <para>
      如果你想要在HSM中生成第二个密钥用作一个区签名密钥，遵循上面
      同样的流程，使用一个不同的密钥标记，一个更小的密钥长度，并在
      dnssec-keyfromlabel的参数中去掉"-f KSK"：
    </para>
    <para>
      （注意：当使用基于OpenSSL的PKCS#11时，标记是一个任意的字符串，它标识
      密钥。使用原生PKCS#11时，标记是一个PKCS#11 URI字符串，其中可能包含
      关于和HSM的更详细的信息，包括自身的PIN。更详细的内容参见
      <xref linkend="man.dnssec-keyfromlabel"/>。）
    </para>
    <screen>
$ <userinput>pkcs11-keygen -b 1024 -l sample-zsk</userinput>
$ <userinput>dnssec-keyfromlabel -l sample-zsk example.net</userinput>
</screen>
    <para>
      作为选择，你也可能更喜欢使用dnssec-keygen来生成一个传统的
      存放在硬盘上的密钥：
    </para>
    <screen>
$ <userinput>dnssec-keygen example.net</userinput>
</screen>
    <para>
      这比一个HSM密钥提供更弱的安全性，但是由于安全的原因，
      HSM可能更慢或者使用不方便，保留HSM并将其用于更小频率的
      密钥签名操作可能更为有效。
      如果你愿意，区签名密钥可以轮转更为频繁，以补偿密钥安全性
      的降低。
      （注意：在使用原生PKCS#11时，与使用硬盘上的密钥相比没有
      速度优势，因为加密操作无论如何将由HSM完成。）
    </para>
    <para>
      现在你可以对区签名了。（注意：如果不给
      <command>dnssec-signzone</command>使用-S选项，就需要将两个
      <filename>K*.key</filename>文件的内容添加到区的主文件中再签名。）
    </para>
    <screen>
$ <userinput>dnssec-signzone -S example.net</userinput>
Enter PIN:
Verifying the zone using the following algorithms:
NSEC3RSASHA1.
Zone signing complete:
Algorithm: NSEC3RSASHA1: ZSKs: 1, KSKs: 1 active, 0 revoked, 0 stand-by
example.net.signed
</screen>
  </section>
  <section><info><title>在命令行指定引擎</title></info>

    <para>
      在使用基于OpenSSL的PKCS#11时，OpenSSL所使用的"引擎"可以通过使用
      "-E &lt;engine&gt;"命令行选项在<command>named</command>和所有BIND的
      <command>dnssec-*</command>工具中指定。
      如果BIND 9是使用--with-pkcs11选项构建的，这个选项缺省为"pkcs11"。
      通常是不需要指定引擎的，除非因为某种原因，你希望使用一个不同的OpenSSL引擎。
    </para>
    <para>
      如果你希望关闭使用"pkcs11"引擎 &mdash; 因为调试目的，或者因为HSM
      不可用 &mdash; 就将引擎设置为空串。例如：
    </para>
    <screen>
$ <userinput>dnssec-signzone -E '' -S example.net</userinput>
</screen>
    <para>
      这将导致<command>dnssec-signzone</command>运行在如同没有使用
      --with-pkcs11选项编译时的情况。
    </para>
    <para>
      当使用原生PKCS#11模式构建时，"引擎"选项具有一个不同的含义：它指定
      PKCS#11提供者库的路径。这在测试一个新的提供者库时可能很有用。
    </para>
  </section>
  <section><info><title>以自动区重签的方式运行named</title></info>

    <para>
      如果你想要<command>named</command>使用HSM密钥动态重签区，
      和/或签名通过nsupdate插入的新记录，named必须能够访问HSM的PIN。
      在基于OpenSSL的PKCS#11中，这是通过将PIN放在openssl.cnf文件中
      来达到（在上面的例子中，
      <filename>/opt/pkcs11/usr/ssl/openssl.cnf</filename>）。
    </para>
    <para>
      openssl.cnf文件的位置可以在运行named之前通过设置OPENSSL_CONF
      环境变量进行覆盖。
    </para>
    <para>openssl.cnf例子：</para>
    <programlisting>
        openssl_conf = openssl_def
        [ openssl_def ]
        engines = engine_section
        [ engine_section ]
        pkcs11 = pkcs11_section
        [ pkcs11_section ]
        PIN = <replaceable>&lt;PLACE PIN HERE&gt;</replaceable>
</programlisting>
    <para>
      这也将允许dnssec-*工具无需PIN入口码就能够访问HSM。
      （pkcs11-*工具直接访问HSM，不经过OpenSSL，所以仍然需要
      一个PIN来使用它们。）
    </para>
    <para>
      在原生PKCS#11模式，PIN可以在一个作为密钥标记的一个属性所指定
      的文件中提供。例如，如果一个密钥有一个标记
      <userinput>pkcs11:object=local-zsk;pin-source=/etc/hsmpin</userinput>，
      就可以从文件<filename>/etc/hsmpin</filename>中读到PIN。
    </para>
    <warning>
      <para>
        在这个方式中，将HSM的PIN放在一个文本文件中可能减少
	使用一个HSM的安全优势。
	在以这种方式配置系统之前，确认这就是你想要的方式。
      </para>
    </warning>
  </section>
</section>

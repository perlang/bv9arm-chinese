.. Copyright (C) Internet Systems Consortium, Inc. ("ISC")
..
.. SPDX-License-Identifier: MPL-2.0
..
.. This Source Code Form is subject to the terms of the Mozilla Public
.. License, v. 2.0.  If a copy of the MPL was not distributed with this
.. file, you can obtain one at https://mozilla.org/MPL/2.0/.
..
.. See the COPYRIGHT file distributed with this work for additional
.. information regarding copyright ownership.

.. _zone_file:

.. _soa_rr:

区文件
---------

本节很大部份是引用自 :rfc:`1034` ，描述资源记录（RR）的概念并解
释如何使用它们。

资源记录
~~~~~~~~

一个域名标识DNS树名字空间中的一个节点。每个节点有一个资源信息的集合，这个集合可以
是空的。资源信息集合与一个由分离的资源记录所组成的特定名字相关。
资源记录在集合中的顺序没有意义，也不会在名字服务器，解析器或DNS的
其它部份中保持。但是，允许出于优化的目的对多个资源记录排序，例如，
指定某个特定的附近的服务器第一个被尝试。参见
:ref:`the_sortlist_statement` 和 :ref:`rrset_ordering` 。

资源记录的组成部份为：

.. glossary::

   owner name
      域名，用于确定资源记录的位置。

   type
      一个编码的16位值，指定资源记录的类型。
      有效资源记录的 **类型** 清单，包括那些已经被废弃的，请参考
     `https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4` 。 

   TTL
      资源记录的生存时间。这个字段是以一个32位整数表示秒数，主要用于
      解析器缓存资源记录时。TTL描述一个资源记录在其被丢弃前可以被缓
      存多长的时间。

   class
      一个编码的16位值，指定一个协议族或一个协议的实例。

   RDATA
      资源数据。数据的格式是与类型相关的，有时也是与类相关的。


以下是当前DNS中有效的资源记录的 **类** ：

.. glossary::

   IN
      互联网（Internet）。今天还广泛使用的唯一 :term:`class` 。

   CH
      CHAOSnet，一个MIT在1970年代中期建立的局域网协议。由于其历史上
      的目的而使用非常少，但是被BIND重新用于服务器内建信息区，如，
      **version.bind** 。

   HS
      Hesiod，一个由MIT的雅典娜（Athena）项目所开发的信息服务。它用
      于在不同的系统数据库之间共享信息，如用户，用户组，打印机等等。

:term:`owner name` 通常是隐含的，而不是形成资源记录的一个完整部份。例如，许多
名字服务器在内部为名字空间形成树或hash结构，和资源记录链节点。其
余的资源记录部份是固定的头部（类型，类，TTL），对所有的资源记录是
一致的，还有一个变化的部份（RDATA）要适应其所描述的记录。

TTL字段是一个资源记录可以被保留在缓存中的时间长度。这个限制不应用
到区中的权威数据；它也会过期，但是遵从区的刷新策略。TTL由数据源所
在区的区管理员指定。短的TTL可以减少缓存，一个为零的TTL禁止缓存，
互联网性能的现实建议对典型的主机，这些时间应该在天的数量级。如果
有一个预期的变化，先在变化之前将TTL减小以在变化期间缩短不一致的持
续时间，然后在变化之后增加回到其原先的值。

资源记录的RDATA部份中的数据作为二进制字符串和域名的一个组成部份被
携带。域名频繁地被用作指向DNS中其它数据的“指针”。

.. _rr_text:

文本形式的资源记录表示
^^^^^^^^^^^^^^^^^^^^^^^^^

资源记录在DNS协议包内被表示成二进制形式，而在存放到一个名字服务器
或解析器中通常被表示成高级编码的形式。在 :rfc:`1034` 中提供的例子
中，使用一个类似主文件中的形式来显示资源记录的内容。在这个格式中，
大多数资源记录显示在一行之内，虽然可以使用括号显示到多行中。

一行的开始是资源记录的属主。如果一行以一个空字符开始，属主就假设
是与上一个资源记录一样。通常包含一些空行以增加可读性。

在属主之后，依次列出资源记录的TTL，类型和类。类型和类使用上面所定
义的缩写，TTL是一个整数，在类型字段之前。为了避免词法分析时的二义
性，类型和类的缩略语不能有交集，TTL是整数，类型缩略语总是在最后。
IN类和TTL值在例子中通常省略，主要是为了更清楚。

资源数据或者资源记录的RDATA部份根据各种数据的表示方法给出。

例如，我们可能这样显示在一个消息中所携带的资源记录：

 +---------------------+---------------+--------------------------------+
 | **ISI.EDU.**        | **MX**        | **10 VENERA.ISI.EDU.**         |
 +---------------------+---------------+--------------------------------+
 |                     | **MX**        | **10 VAXA.ISI.EDU**            |
 +---------------------+---------------+--------------------------------+
 | **VENERA.ISI.EDU**  | **A**         | **128.9.0.32**                 |
 +---------------------+---------------+--------------------------------+
 |                     | **A**         | **10.1.0.52**                  |
 +---------------------+---------------+--------------------------------+
 | **VAXA.ISI.EDU**    | **A**         | **10.2.0.27**                  |
 +---------------------+---------------+--------------------------------+
 |                     | **A**         | **128.9.0.33**                 |
 +---------------------+---------------+--------------------------------+

MX资源记录的RDATA部份由一个16位数字和一个紧随的域名组成。地址资源
记录使用一个标准的IP地址格式来包含一个32位的互联网地址。

上述例子显示6条资源记录，即3个域名，每个域名带有2条资源记录。

这里是另一个可能的例子：

 +----------------------+---------------+-------------------------------+
 | **XX.LCS.MIT.EDU.**  | **IN A**      | **10.0.0.44**                 |
 +----------------------+---------------+-------------------------------+
 |                      | **CH A**      | **MIT.EDU. 2420**             |
 +----------------------+---------------+-------------------------------+

这个显示了 **XX.LCS.MIT.EDU** 的两个地址，分别在不同的类中。

.. _mx_records:

对MX记录的讨论
~~~~~~~~~~~~~~~~~~~~~~~~

如同上面所描述的，域名服务器将消息存放为一系列资源数据，每个资源数
据都包含一个关于一个给定域名（通常但不总是一个主机）的特定的信息片
段。理解一个资源记录的最简单的方式是将其作为一个类型化数据对，即一
个域名和与其匹配的相关数据，和一些附加的类型信息一起存储，用以帮助
系统决定何时资源记录是相关的。

MX记录用于控制电子邮件的投递。在记录中指定的数据是一个优先级和一个
域名。优先级控制电子邮件尝试投递的顺序，数字最小的最优先。如果两个
优先级相同，就随机选择一个服务器。如果一个给定优先级的服务器没有响
应，邮件传输代理（MTA，mail transport agent）将会选择下一个更大的优
先数。优先数大小没有绝对含义；它们仅仅是相对于这个域名的其它MX记录
而言。所给出的域名是邮件将要被投递到的机器。它 **必须** 有一个相关的
地址记录（A或者AAAA）；CNAME是不够的。

对于一个给定域，如果同时有一个CNAME记录和一个MX记录，MX记录是错误的，
将被忽略。作为替代，邮件将被投递到被CNAME所指向的MX记录所指定的服务
器上。例如：

 +------------------------+--------+--------+--------------+------------------------+
 | **example.com.**       | **IN** | **MX** | **10**       | **mail.example.com.**  |
 +------------------------+--------+--------+--------------+------------------------+
 |                        | **IN** | **MX** | **10**       | **mail2.example.com.** |
 +------------------------+--------+--------+--------------+------------------------+
 |                        | **IN** | **MX** | **20**       | **mail.backup.org.**   |
 +------------------------+--------+--------+--------------+------------------------+
 | **mail.example.com.**  | **IN** | **A**  | **10.0.0.1** |                        |
 +------------------------+--------+--------+--------------+------------------------+
 | **mail2.example.com.** | **IN** | **A**  | **10.0.0.2** |                        |
 +------------------------+--------+--------+--------------+------------------------+

邮件投递先尝试 **mail.example.com** 和 **mail2.example.com** （以任
何顺序），如果这两者都没有成功，将会尝试投递到 **mail.backup.org** 。

.. _Setting_TTLs:

设置TTL
~~~~~~~~~~~~

资源记录的生存期(time-to-live, TTL)字段是一个32位的整数，它的单位为秒，
主要用于解析器
缓存资源记录。TTL描述一个资源记录在被丢弃前可以被缓存多长时间。当前
用于一个区文件中的有以下三种类型的TTL。

.. glossary::

   SOA
      SOA的最后一个字段是否定缓存TTL。它控制从这台服务器发出的没有这个
      域名（NXDOMAIN）的响应会在其它服务器中缓存多长时间。更详细的内容
      可以在 :rfc:`2308` 中找到。

      最大的否定缓存时间是3小时（3h）。

   $TTL
      在区文件顶部（在SOA之前）的$TTL指令给出对每个没有指定TTL集的资源
      记录一个缺省的TTL。

   RR TTLs
      每个资源记录可以有一个以秒为单位的TTL，它将控制其它服务器可以缓
      存它多长时间。

所有这三种TTL的缺省单位都是秒，不过单位都可以被显式指定，例如，
**1h30m** 。

.. _ipv4_reverse:

IPv4中的反向映射
~~~~~~~~~~~~~~~~~~~~~~~

反向名字解析（即将IP地址翻译成名字）是通过使用 **in-addr.arpa** 域
和PTR记录来实现的。in-addr.arpa域中的条目是以自左向右表示从大到小
的方式组成的。这与IP地址通常书写方式的顺序相反。这样，一个IP地址为
10.1.2.3的机器对应的in-addr.arpa名字为3.2.1.10.in-addr.arpa。这个
名字应该有一个PTR资源记录，并且其数据字段是机器的名字，如果机器有
多个名字，作为可选项，也可以有多个PTR记录。例如，在 **example.com**
域中：

 +--------------+-------------------------------------------------------+
 | **$ORIGIN**  | **2.1.10.in-addr.arpa**                               |
 +--------------+-------------------------------------------------------+
 | **3**        | **IN PTR foo.example.com.**                           |
 +--------------+-------------------------------------------------------+

.. note::

   这个例子中的 **$ORIGIN** 行仅用于提供上下文；它不一定出现在实
   际使用中。它们用于这里，仅仅是指明例子是相对于所列出的起点。

.. _zone_directives:

其它区文件指令
~~~~~~~~~~~~~~~~~~~~~~~~~~

DNS“主文件”格式最初由 :rfc:`1035` 定义，后来被扩展。虽然格式本身
是类独立的，但区文件中的所有记录都必须是属于同一个类。

主文件指令包括 **$ORIGIN** ， **$INCLUDE** 和 **$TTL** 。

.. _atsign:

**@** (at符号)
^^^^^^^^^^^^^^^^^^^

当asperand或at符号（@）（译注：即圈a）用于标记（或名字）字段中时，
它表示当前原点。在区文件的开始处，它就是 <**zone_name**>（后跟一
个结尾的点）。

.. _origin_directive:

**$ORIGIN** 指令
^^^^^^^^^^^^^^^^

语法： **$ORIGIN** domain-name [comment]

**$ORIGIN** 设置域名，它将被添加到任何不完整记录的后面。当一个区
刚被读入时，有一个隐含的 ``$ORIGIN <zone_name>.`` ；
注意结尾的点。当前的 **$ORIGIN** 被添加到 **$ORIGIN** 参数
所指定的域名之后，如果它不是一个绝对名字。

::

   $ORIGIN example.com.
   WWW     CNAME   MAIN-SERVER

相当于

::

   WWW.EXAMPLE.COM. CNAME MAIN-SERVER.EXAMPLE.COM.

.. _include_directive:

**INCLUDE** 指令
^^^^^^^^^^^^^^^^^^^

语法： **INCLUDE** filename [origin] [comment]

读入并处理文件 **filename** ，就像它在这一点包含此文件进来。
**filename** 可以是一个绝对路径，或者是一个相对路径。如果是后者，它从
:iscman:`named` 的工作目录中读入。如果设定了 **origin** ，文件就使用
**ORIGIN** 所设定的值处理；否则，使用当前 **ORIGIN** 。

在被包含的文件被读入之后，起点和当前域名恢复到它们 **INCLUDE**
之前的值。

.. note::

   :rfc:`1035` 指定了当前起点应该在一个 **INCLUDE** 指令之后恢复，
   但未对当前域名是否恢复作出规定。BIND 9对两者都恢复。这可能构成
   :rfc:`1035` 的一个派生，或者一个特征，也许都是。

.. _ttl_directive:

**TTL** 指令
^^^^^^^^^^^^^^^^^^^^^^

语法： **TTL** default-ttl [comment]

为此命令之后的未定义TTL的记录设置缺省的生存期（TTL）。有效的TTL值
范围为0-2147483647秒。

**TTL** 在 :rfc:`2308` 中定义。

.. _generate_directive:

BIND主文件扩展： **GENERATE** 指令
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

语法： **GENERATE** range lhs [ttl] [class] type rhs [comment]

**GENERATE** 用于建立一系列资源记录，它们仅仅只差别一个循环变量。
**GENERATE** 可以轻易地生成在 :rfc:`2317` 中所描述的支持/24之下的
反向授权所要求的一系列记录。

::

   $ORIGIN 0.0.192.IN-ADDR.ARPA.
   $GENERATE 1-2 @ NS SERVER$.EXAMPLE.
   $GENERATE 1-127 $ CNAME $.0

等效于

::

   0.0.0.192.IN-ADDR.ARPA. NS SERVER1.EXAMPLE.
   0.0.0.192.IN-ADDR.ARPA. NS SERVER2.EXAMPLE.
   1.0.0.192.IN-ADDR.ARPA. CNAME 1.0.0.0.192.IN-ADDR.ARPA.
   2.0.0.192.IN-ADDR.ARPA. CNAME 2.0.0.0.192.IN-ADDR.ARPA.
   ...
   127.0.0.192.IN-ADDR.ARPA. CNAME 127.0.0.0.192.IN-ADDR.ARPA.

两者都生成A和MX记录的集合。注意MX的右侧是一个被引号包含的字符串。
在右侧被处理时，引号会被去掉。

::

   $ORIGIN EXAMPLE.
   $GENERATE 1-127 HOST-$ A 1.2.3.$
   $GENERATE 1-127 HOST-$ MX "0 ."

等效于

::

   HOST-1.EXAMPLE.   A  1.2.3.1
   HOST-1.EXAMPLE.   MX 0 .
   HOST-2.EXAMPLE.   A  1.2.3.2
   HOST-2.EXAMPLE.   MX 0 .
   HOST-3.EXAMPLE.   A  1.2.3.3
   HOST-3.EXAMPLE.   MX 0 .
   ...
   HOST-127.EXAMPLE. A  1.2.3.127
   HOST-127.EXAMPLE. MX 0 .

**range**
   这个可以有两种格式：start-stop或start-stop/step。如果使用第一
   种格式，step就被设为1。“start”，“stop”和“step”都必须是介于0和
   (2^31)-1之间的正整数。“start”必须小于等于“stop”。

**owner**
   描述所建立的资源记录的属主名。任何在 **owner** 串中的单个 **$**
   （美元符号）都被循环变量所替代。要在输出部份输出 **$** ，需要
   使用一个反斜线 **\\** 对 **$** 进行转义，例如 ``\$`` 。可选地，
   **$** 符号后可以跟修饰符，其作用是改变循环器、宽度和进制的偏
   移量。

   修饰符由一个 **{** （左花括号）引导，它紧接着 **$** 符号，即
   **${offset[,width[,base]]}** 。例如， **${-20,3,d}** 从当前值
   减去20，打印“作为十进制数，以0填充，宽度为3”的结果。可用的输
   出格式是十进制（ **d** ），八进制（ **o** ），十六进制（ **x**
   或 **X** ，后者为大写输出）和半字节（ **n** 或 **N** ，后者为
   大写输出）。

   缺省修饰符是 **${0,0,d}** 。如果 **owner** 不是完整名字，就将
   当前 **$ORIGIN** 添加在名字后面。

   在半字节模式中，值会被当成一个倒置的十六进制串，每个十六进制
   数字都是一个单独的标记。宽度域包含标记分隔符。

   为了对早期版本的兼容， **$$** 仍然被识别，指示输出一个字面的 **$** 。

**ttl**
   这指定所生成的记录的生存期。如果未指定，就使用正常的TTL继承规
   则来继承。

   **class** 和 **ttl** 的位置可以互换。

**class**
   这指定所生成的记录的类。如果指定，必须与区的类一致。

   **class** 和 **ttl** 的位置可以互换。

**type**
   这可以是任何有效的类型。

**rdata**
   这是一个包含即将创建的资源记录的RDATA的字符串。如果其中有空白
   字符，需要被引号包含；引号不会出现在生成的记录中。

**$GENERATE** 指令是一个BIND的扩展，并不是标准区文件格式的一部份。

.. _zonefile_format:

附加文件格式
~~~~~~~~~~~~~~~~~~~~~~~

除了标准的文本格式，BIND 9支持读或者导出其它格式区文件的能力。

**raw** 格式是区数据的一个二进制表示，类似于在区传送中使用的方式。
由于它不要求对文本进行语法分析，装载时间显著缩短。

对于一个主服务器，一个 **raw** 格式的区可以通过
:iscman:`named-compilezone` 命令从一个文本区文件生成。对辅服务器或者动
态区，它是在 :iscman:`named` 完成区传送之后导出区或者应用上次的更新时
自动生成的，如果使用 **masterfile-format** 选项指定了这些格式之
中的一种。

如果需要手工修改一个 **raw** 格式的区文件，必须先将其通过
:iscman:`named-compilezone` 命令转换为 **text** 格式，然后在编辑之后再转换回
去。例如：

::

    named-compilezone -f raw -F text -o zonefile.text <origin> zonefile.raw
    [edit zonefile.text]
    named-compilezone -f text -F raw -o zonefile.raw <origin> zonefile.text

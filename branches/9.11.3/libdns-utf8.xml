<!--
 - Copyright (C) 2010, 2014-2017  Internet Systems Consortium, Inc. ("ISC")
 -
 - This Source Code Form is subject to the terms of the Mozilla Public
 - License, v. 2.0. If a copy of the MPL was not distributed with this
 - file, You can obtain one at http://mozilla.org/MPL/2.0/.
-->

<!-- Converted by db4-upgrade version 1.0 -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="bind9.library">
  <info>
    <title>BIND 9 DNS库支持</title>
  </info>
  <para>
    本版本的BIND 9“导出”其内部库，使后者可以更容易地被第三方应用
    所利用（我们在本文档中将其称为“导出”库）。在被其它应用使用时，
    某些库函数被从特定的BIND仅有的特性替换为更加通用的特性；
    要打开这些通用特性，调用程序通过调用
    <command>isc_lib_register()</command>初始化这个库。
  </para>
  <para>
    除了BIND 9用到的DNS相关的API，这个库还提供下列特性：
  </para>
  <itemizedlist>
    <listitem>
      <para>
        “DNS客户端”模块。这是一个更高层的API，它为名字解析，与
        特定服务器之间的单次DNS事物，和动态更新提供了一个接口。
        关于名字解析，它支持诸如DNSSEC验证和缓存这样的高级特性。
	这个模块支持同步和异步模式。
      </para>
    </listitem>
    <listitem>
      <para>
        “IRS”（Information Retrieval System，信息检索系统）库。
	它为分析传统的<filename>resolv.conf</filename>文件和这个
	包中其余应用所用到的，更高级的，DNS专用配置文件提供一个
	接口（参见下面对<filename>dns.conf</filename>文件的描述）。
      </para>
    </listitem>
    <listitem>
      <para>
        作为IRS库的一部份，提供了标准地址-名字映射函数，
        <command>getaddrinfo()</command>和
	<command>getnameinfo()</command>。它们使用支持DNSSEC
	验证解析器后端，并能够使用其他BIND 9库的高级特性，
	如缓存。<command>getaddrinfo()</command>函数在未指定
	地址族时并发解析A和AAAA资源记录。
      </para>
    </listitem>
    <listitem>
      <para>
        一个试验性框架，用于支持与BIND 9内部事件任务系统
	不一样的事件库。
      </para>
    </listitem>
  </itemizedlist>
  <section>
    <info>
      <title>安装</title>
    </info>

    <screen>
$ <userinput>make install</userinput>
    </screen>
    <para>
      通常的BIND安装也将按照库对象和头文件。一般会要求根权限。
    </para>
    <para>
      要了解如何在安装之后构建你自己的应用，参见
      <filename>lib/samples/Makefile-postinstall.in</filename>。
    </para>
  </section>
  <section>
    <info>
      <title>已知的缺陷/限制</title>
    </info>
    <itemizedlist>
      <listitem>
        <para>
          （当前）导出库不支持“固定的”资源记录集顺序。如果你想在
	  某些应用，如<command>named</command>，使用“固定的”资源
	  记录集顺序而同时仍然向在没有固定的顺序支持的情况下构建
	  导出库，就分别构建他们：
      <screen>
$ <userinput>./configure --enable-fixed-rrset <replaceable>[other flags, but not --enable-exportlib]</replaceable></userinput>
$ <userinput>make</userinput>
$ <userinput>./configure --enable-exportlib <replaceable>[other flags, but not --enable-fixed-rrset]</replaceable></userinput>
$ <userinput>cd lib/export</userinput>
$ <userinput>make</userinput>
</screen>
        </para>
      </listitem>
      <listitem>
        <para>
          导出库的验证存根解析器不支持RFC 5011。实际上，是否应该支持
          并不明确：信任锚应该是一项系统范围的配置，它应该由一名系统
	  管理员来管理，同时，存根解析器是由普通用户运行的普通应用所
 	  使用。
        </para>
      </listitem>
      <listitem>
        <para>
          不是所有通常的<filename>/etc/resolv.conf</filename>选项都
          在IRS库中有支持。在当前版本中，能够使用的选项仅有
	  <command>debug</command>和<command>ndots</command>。
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <info>
      <title>dns.conf文件</title>
    </info>
    <para>
      IRS库支持一个与DNS库相关的“高级”配置文件，其配置参数会超越
      <filename>resolv.conf</filename>的功能。
      特别地，它还打算提供DNSSEC相关的配置参数。缺省时，这个配置
      文件的路径为<filename>/etc/dns.conf</filename>。
      这个模块极具试验性，其配置语法和库接口在将来的版本中可能会
      有变化。
      当前，只支持<command>trusted-keys</command>语句，其语法与
      <filename>named.conf</filename>中的同一语句一样。（更详细
      的内容，参见<xref linkend="trusted-keys"/>。）
    </para>
  </section>
  <section>
    <info>
      <title>例子应用</title>
    </info>
    <para>
      这里提供了一些使用这个API的例子应用程序供参考。下面是对这些
      应用的一个简要描述。
    </para>
    <section>
      <info>
        <title>sample: 一个简单的存根解析器应用</title>
      </info>
      <para>
        向一个指定的递归服务器发送一个指定名字（作为选项，也可
	指定资源记录类型）的请求，并将结果打印为一个资源记录的
	列表。如果通过命令行选项的集合给出了一个信任锚，它也可
	以用作一个验证存根解析器。
      </para>
      <para>
        Usage: sample [options] server_address hostname
      </para>
      <para>
        选项和参数：
      </para>
      <variablelist>
        <varlistentry>
          <term>-t RRtype</term>
          <listitem>
            <para>
              指定请求的资源记录类型。缺省是A。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>[-a algorithm] [-e] -k keyname -K keystring</term>
	  <listitem>
            <para>
              在命令行指定一个DNS密钥，用于验证响应。例如，指定
	      下面example.com的DNSKEY：
              <literallayout>
                example.com. 3600 IN DNSKEY 257 3 5 xxx
              </literallayout>
              以下指定选项：
              <screen>
<userinput>-e -k example.com -K "xxx"</userinput>
              </screen>
              -e表示这个密钥是一个区的“密钥签名密钥”（也被称为
              “安全入口点”）。当省略-a时，缺省使用rsasha1。
	    </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>-s domain:alt_server_address</term>
	  <listitem>
            <para>
              为特定“域”指定一个单独的递归服务器地址。例如：
              -s example.com:2001:db8::1234
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>server_address</term>
	  <listitem>
            <para>
              请求发向的递归服务器的一个IP（v4/v6）地址。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>hostname</term>
	  <listitem>
            <para>
              请求的域名
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section>
      <info>
        <title>sample-async: 一个简单的存根解析器，异步工作</title>
      </info>
      <para>
        与“sample”相似，但是以一个独立文件方式接受（请求）域名清单并
        异步解析这些名字。
      </para>
      <para>
        Usage: sample-async [-s server_address] [-t RR_type] input_file
      </para>
      <para>
        选项和参数：
      </para>
    <variablelist>
      <varlistentry>
        <term>-s server_address</term>
        <listitem>
          请求发向的递归服务器的一个IPv4地址。
          （在这个实现中不支持IPv6地址）
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>-t RR_type</term>
        <listitem>
          指定请求的资源记录类型。缺省是A。
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>input_file</term>
        <listitem>
          要解析域名的清单。每行由一个域名组成。例如：
          <literallayout>
            www.example.com
            mx.example.net
            ns.xxx.example
          </literallayout>
        </listitem>
      </varlistentry>
      </variablelist>
    </section>
    <section>
      <info>
        <title>sample-request: 一个简单的DNS事务客户端</title>
      </info>
      <para>
        向一个特定的服务器发送一个请求，并输出经过最小处理的响应。
	它不充当一个“存根解析器”：一旦它从服务器获得任何响应，就停
	止处理进程，无论响应是否一个引用或者别名（CNAME或DNAME），
	本该需要以更多的请求来获得最终的答案。换句话说，这个应用扮
	演了一个非常简化的<command>dig</command>。
      </para>
      <para>
        Usage: sample-request [-t RRtype] server_address hostname
      </para>
      <para>
        选项和参数：
      </para>
      <variablelist>
        <varlistentry>
          <term>-t RRtype</term>
          <listitem>
            <para>
              指定请求的资源记录类型。缺省是A。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>server_address</term>
          <listitem>
            <para>
              请求发向的递归服务器的一个IP（v4/v6）地址。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>hostname</term>
          <listitem>
            <para>
              请求的域名
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section>
      <info>
        <title>sample-gai: getaddrinfo()和getnameinfo()测试代码</title>
      </info>
      <para>
        这是一个用于检查<command>getaddrinfo()</command>和
	<command>getnameinfo()</command>行为的测试程序。它使用一个
	主机名作为测试，以给定的主机名调用
	<command>getaddrinfo()</command>，并用
	<command>getaddrinfo()</command>所返回的结果IP地址调用
	<command>getnameinfo()</command>。如果dns.conf文件存在并且
        定义了一个信任锚，下层解析器充当一个验证解析器，并且在
	DNSSEC验证失败时，
        <command>getaddrinfo()</command>/<command>getnameinfo()</command>
        会失败并返回一个EAI_INSECUREDATA错误。
      </para>
      <para>
        Usage: sample-gai hostname
      </para>
    </section>
    <section>
      <info>
        <title>sample-update: 一个简单的动态更新客户端程序</title>
      </info>
      <para>
        接受一个更新命令作为一个命令行参数，发送一个更新请求
	消息给权威服务器，并输出从服务器回来的响应。换句话说，
	这就是一个简化版的<command>nsupdate</command>。
      </para>
      <para>
        Usage: sample-update [options] (add|delete) "update data"
      </para>
      <para>
        选项和参数：
      </para>
      <variablelist>
        <varlistentry>
          <term>-a auth_server</term>
	  <listitem>
            <para>
              作为包含所更新名字的区的权威服务器的一个IP地址。
	      这通常应该是接受动态更新的主权威服务器。它也可以
	      是一个被配置为向主服务器转发更新请求的辅服务器。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>-k keyfile</term>
          <listitem>
            <para>
              一个TSIG密钥文件，用于保证更新事务的安全。密钥
	      文件格式与nsupdate实用程序所用的一致。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>-p prerequisite</term>
          <listitem>
            <para>
              一个更新的先决条件（只能指定一个先决条件）。这个
	      先决条件的格式与nsupdate实用程序所能接受的一致。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>-r recursive_server</term>
	  <listitem>
            <para>
              这个应用将会用到的一个递归服务器的一个IP地址。必
	      须使用一个递归服务器来获取权威服务器的地址，再向
	      后者发送更新请求。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>-z zonename</term>
	  <listitem>
            <para>
              区所包含的域名。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>(add|delete)</term>
          <listitem>
            <para>
              指定更新操作的类型。必须是“add”或者“delete”之一。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>"update data"</term>
          <listitem>
            <para>
              指定要改更新的数据。典型的数据例子看起来像
              “name TTL RRtype RDATA”。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <note>
        <simpara>
          实际上，必须指定-a或者-r。其它是可选的；下层的库例程
	  试图为更新标识合适的服务器和区名。
        </simpara>
      </note>
      <para>
        例如：假设dynamic.example.com区的主权威服务器有一个IPv6
	地址2001:db8::1234，
      </para>
      <screen>
$ <userinput>sample-update -a sample-update -k Kxxx.+nnn+mmmm.key add "foo.dynamic.example.com 30 IN A 192.168.2.1"</userinput></screen>
      <para>
        使用给定的密钥为foo.dynamic.example.com增加一条A记录。
      </para>
      <screen>
$ <userinput>sample-update -a sample-update -k Kxxx.+nnn+mmmm.key delete "foo.dynamic.example.com 30 IN A"</userinput></screen>
      <para>
        使用给定的密钥删除foo.dynamic.example.com的所有A记录。
      </para>
      <screen>   
$ <userinput>sample-update -a sample-update -k Kxxx.+nnn+mmmm.key delete "foo.dynamic.example.com"</userinput></screen>
      <para>
        使用给定的密钥删除foo.dynamic.example.com的所有记录。
      </para>
    </section>
    <section>
      <info>
        <title>nsprobe: domain/name server checker in terms of RFC 4074</title>
      </info>
      <para>
        检查一个域名集合，按照RFC 4074的描述查看域名的名字服务器的行为
	是否正确。它被包含在一系列例子程序的集合中，这些程序展示了如何
	将导出库用于DNS相关的应用中。
      </para>
      <para>
        Usage: nsprobe [-d] [-v [-v...]] [-c cache_address] [input_file]
      </para>
      <para>
        Options
      </para>
      <variablelist>
        <varlistentry>
          <term>-d</term>
	  <listitem>
            <para>
              以“debug”模式运行。使用这个选项，nsprobe将会转储其
	      所收到的每个资源记录。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>-v</term>
	  <listitem>
            <para>
              增加其它普通日志消息的可见性。这个可以被多次指定。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>-c cache_address</term>
          <listitem>
            <para>
              指定一个递归（缓存）名字服务器的一个IP地址。
	      nsprobe使用这个服务器来获取每个域名的NS资源记录集
	      和名字服务器的A和/或AAAA资源记录集。
              缺省值是127.0.0.1。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>input_file</term>
          <listitem>
            <para>
              一个包含了需要被探测的域（区）名清单的文件的文件名。
	      输入文件的每行指定了一个域名，如“example.com”。通常
	      这个域名必须是某些DNS区的顶点名（而不是普通的“主机名”
	      如“www.example.com”）。
              nsprobe首先识别给定域名的NS资源记录集，并向这些服务
	      器发送A和AAAA请求，请求区下某些“广泛使用的”名字；
	      特别地，在区名前增加“www”和“ftp”。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section>
    <info>
      <title>库参考</title>
    </info>
    <para>
      截至目前撰写的文稿，这个库，头文件（其中一些提供了非常详细
      的解释），和例子应用程序还没有正式的“手册”，除了本文档，
    </para>
  </section>
</section>
